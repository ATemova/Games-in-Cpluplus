#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

const int SIZE = 10;
const int MINES = 10;

vector<vector<char>> board(SIZE, vector<char>(SIZE, ' '));
vector<vector<bool>> mines(SIZE, vector<bool>(SIZE, false));
vector<vector<bool>> revealed(SIZE, vector<bool>(SIZE, false));

void printBoard() {
    cout << "  ";
    for (int i = 0; i < SIZE; ++i) cout << i << " ";
    cout << endl;

    for (int i = 0; i < SIZE; ++i) {
        cout << i << " ";
        for (int j = 0; j < SIZE; ++j) {
            if (revealed[i][j])
                cout << (mines[i][j] ? '*' : board[i][j]) << " ";
            else
                cout << "# ";
        }
        cout << endl;
    }
}

void placeMines() {
    int count = 0;
    while (count < MINES) {
        int x = rand() % SIZE;
        int y = rand() % SIZE;
        if (!mines[x][y]) {
            mines[x][y] = true;
            ++count;
        }
    }
}

int countAdjacentMines(int x, int y) {
    int count = 0;
    for (int dx = -1; dx <= 1; ++dx) {
        for (int dy = -1; dy <= 1; ++dy) {
            int nx = x + dx, ny = y + dy;
            if (nx >= 0 && nx < SIZE && ny >= 0 && ny < SIZE && mines[nx][ny]) {
                ++count;
            }
        }
    }
    return count;
}

void reveal(int x, int y) {
    if (x < 0 || x >= SIZE || y < 0 || y >= SIZE || revealed[x][y]) return;
    revealed[x][y] = true;
    int adjacentMines = countAdjacentMines(x, y);
    if (adjacentMines > 0) {
        board[x][y] = '0' + adjacentMines;
    } else {
        board[x][y] = ' ';
        for (int dx = -1; dx <= 1; ++dx) {
            for (int dy = -1; dy <= 1; ++dy) {
                if (dx != 0 || dy != 0) reveal(x + dx, y + dy);
            }
        }
    }
}

int main() {
    srand(time(0));
    placeMines();
    int x, y;
    while (true) {
        printBoard();
        cout << "Enter coordinates (x y): ";
        cin >> x >> y;
        if (mines[x][y]) {
            cout << "Game Over! You hit a mine." << endl;
            break;
        }
        reveal(x, y);
    }
    return 0;
}
