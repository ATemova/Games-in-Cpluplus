#include <iostream>
#include <vector>

using namespace std;

const int SIZE = 9;
vector<vector<int>> board(SIZE, vector<int>(SIZE, 0));

bool isValid(int row, int col, int num) {
    for (int x = 0; x < SIZE; ++x) {
        if (board[row][x] == num || board[x][col] == num || 
            board[row - row % 3 + x / 3][col - col % 3 + x % 3] == num) {
            return false;
        }
    }
    return true;
}

bool solveSudoku() {
    int row, col;
    bool empty = false;
    for (row = 0; row < SIZE; ++row) {
        for (col = 0; col < SIZE; ++col) {
            if (board[row][col] == 0) {
                empty = true;
                break;
            }
        }
        if (empty) break;
    }
    if (!empty) return true;
    for (int num = 1; num <= 9; ++num) {
        if (isValid(row, col, num)) {
            board[row][col] = num;
            if (solveSudoku()) return true;
            board[row][col] = 0;
        }
    }
    return false;
}

void printBoard() {
    for (const auto& row : board) {
        for (int num : row) cout << num << " ";
        cout << endl;
    }
}

int main() {
    // Example Sudoku board (0 represents empty cells)
    board = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku()) {
        printBoard();
    } else {
        cout << "No solution exists" << endl;
    }

    return 0;
}
